import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,f as p,b as n,d as e,a as o}from"./app-iXoxbEF2.js";const c={},l=n("h1",{id:"c002-22届0818怪",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c002-22届0818怪","aria-hidden":"true"},"#"),e(" C002.22届0818怪")],-1),i=o(`<h2 id="_1-pom-xml-60-63" tabindex="-1"><a class="header-anchor" href="#_1-pom-xml-60-63" aria-hidden="true">#</a> 1.pom.xml 60-63</h2><p>tail-backend 2022-08-18 18:39:03 /tail-common/pom.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maven版本号统一定义" tabindex="-1"><a class="header-anchor" href="#maven版本号统一定义" aria-hidden="true">#</a> maven版本号统一定义</h3><p>Maven的实践中，版本号在parent的porperties中定义， 格式为<code>*.version</code>，如<code>easyexcel.version</code>。</p><p>这也就要求，任何一个依赖必须明确定义，知道去用途，特性，尤其漏洞等。</p><h2 id="_2-truckcontroller-java-82-83" tabindex="-1"><a class="header-anchor" href="#_2-truckcontroller-java-82-83" aria-hidden="true">#</a> 2.TruckController.java 82-83</h2><p>bbl_backend 2022-09-04 12:20:23</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;truck rate {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="日志性能和碎片" tabindex="-1"><a class="header-anchor" href="#日志性能和碎片" aria-hidden="true">#</a> 日志性能和碎片</h3><p>使用slf4j的占位符<code>{}</code>，其目标之一是避免无意义的性能消耗和内存碎片。 此处不管日志级别如何，都会执行toJSONString。应修改为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 常规写法，推荐，简单明了</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;truck rate {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2.0+的fluent+lambda写法，视情况而定，不推荐</span>
logger<span class="token punctuation">.</span><span class="token function">atInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;truck rate {}&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">addArgument</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-commonshipresponse-java-47-49" tabindex="-1"><a class="header-anchor" href="#_3-commonshipresponse-java-47-49" aria-hidden="true">#</a> 3.CommonShipResponse.java 47-49</h2><p>bbl_backend 2022-09-04 17:52:27</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">CommonResponse</span> res <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">CommonResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="低效不安全的复制" tabindex="-1"><a class="header-anchor" href="#低效不安全的复制" aria-hidden="true">#</a> 低效不安全的复制</h3><p>业务代码中，经常有Dto值赋值或克隆。按以下优先级从高到低考虑。</p><ul><li>MapStruct - 强类型，编译时，静态赋值。</li><li>BeanUtil - 弱类型，运行时属性反射赋值或浅clone</li><li>序列化反序列化 - 弱类型，深度复制，kryo优于json。</li></ul><h2 id="_4-expressaccountcache-java-55-58" tabindex="-1"><a class="header-anchor" href="#_4-expressaccountcache-java-55-58" aria-hidden="true">#</a> 4.ExpressAccountCache.java 55-58</h2><p>bbl_backend 2022-09-04 19:01:07</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExpressAccount</span><span class="token punctuation">&gt;</span></span> <span class="token function">getExpressAccountById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ExpressAccount</span> ea <span class="token operator">=</span> expressAccountDao<span class="token punctuation">.</span><span class="token function">fetchOneById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>ea<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getter命名误导" tabindex="-1"><a class="header-anchor" href="#getter命名误导" aria-hidden="true">#</a> getter命名误导</h3><p>慎用<code>get</code>动词前缀，以免误导为<code>getter</code>，<code>set</code>同。 在JavaBean体系中，带有getter特征，意味在简单取值，无副作用。</p><p>对于此类方法，应该采用能够翻译任务层面和轻重的动词。</p><ul><li>服务层 - make/save/load/find</li><li>服务层 - create/remove/modify/search</li><li>数据层 - purge/store/fetch</li><li>sql层 - insert/delete/update/select</li></ul><h3 id="容器optional及值对象" tabindex="-1"><a class="header-anchor" href="#容器optional及值对象" aria-hidden="true">#</a> 容器Optional及值对象</h3><p>非函数式，不推荐用<code>Optional</code>，因java中stream+lambda非常丑陋。 <code>Long</code>和<code>long</code>，后者<code>@NotNull</code>，前者要判断<code>NPE</code>。</p><h2 id="_5-truckserviceimpl-java-239-242" tabindex="-1"><a class="header-anchor" href="#_5-truckserviceimpl-java-239-242" aria-hidden="true">#</a> 5.TruckServiceImpl.java 239-242</h2><p>bbl_backend 2022-09-05 11:31:12</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BblException</span><span class="token punctuation">(</span><span class="token string">&quot;请先确认时区&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重复链式调用" tabindex="-1"><a class="header-anchor" href="#重复链式调用" aria-hidden="true">#</a> 重复链式调用</h3><p>无法确定链式调用是否具有幂等性的时候，必须提取final变量。 此外，推荐提取变量以减少代码长度，除非是非幂等性需要。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> timeZone <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>timeZone<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span>timeZone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BblException</span><span class="token punctuation">(</span><span class="token string">&quot;请先确认时区&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用i18n异常" tabindex="-1"><a class="header-anchor" href="#使用i18n异常" aria-hidden="true">#</a> 使用I18n异常</h3><p>在需要I18n的场景，需要使用Code或Enum转换业务Message。 此处异常，应该换成无堆栈的MessageException，可提高性能。</p><h2 id="_6-mothershipserviceimpl-java-66-68" tabindex="-1"><a class="header-anchor" href="#_6-mothershipserviceimpl-java-66-68" aria-hidden="true">#</a> 6.MotherShipServiceImpl.java 66-68</h2><p>bbl_backend 2022-09-05 18:49:36</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;?zip=%s&amp;city=%s&amp;state=%s&amp;street=%s&quot;</span><span class="token punctuation">,</span> zip<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> street<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> s <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-format效果不经济" tabindex="-1"><a class="header-anchor" href="#string-format效果不经济" aria-hidden="true">#</a> String.format效果不经济</h3><p>应该避免使用C语言<code>printf</code>风格的字符串格式化，效果不经济。 建议直接使用字符串拼接，或支持预编译的工具类，如<code>StringTemplate</code>。</p><p>与此Formatter情景类似的还有Pattern的split, replace 要注意线程安全，单例安全编译，多线程下高性能使用。</p><h3 id="url中的空格是-还是-20" tabindex="-1"><a class="header-anchor" href="#url中的空格是-还是-20" aria-hidden="true">#</a> URL中的空格是<code>+</code>还是<code>%20</code></h3><ul><li><code>replace(&quot;+&quot;, &quot;%20&quot;)</code> - 字符串替换全部</li><li><code>replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;)</code> - 正则替换全部</li></ul><p>空格在<code>RFC3986</code>约定为<code>%20</code>，如js的encodeURI。 在<code>RFC1866</code>约定为<code>+</code>，如java中的URLEncoder。</p><p>以下工具默认<code>%20</code>，就不必使用蹩脚的replace了</p><ul><li>spring-web的UriUtils</li><li>guava的UrlEscapers.urlFragmentEscaper()</li></ul><h2 id="_7-mothershipserviceimpl-java-171-174" tabindex="-1"><a class="header-anchor" href="#_7-mothershipserviceimpl-java-171-174" aria-hidden="true">#</a> 7.MotherShipServiceImpl.java 171-174</h2><p>bbl_backend 2022-09-06 17:47:25</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \\
    <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MotherCommonResponse</span><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单行多调用代码" tabindex="-1"><a class="header-anchor" href="#单行多调用代码" aria-hidden="true">#</a> 单行多调用代码</h3><p>含有多调用的单行代码，不宜过长，影响可读性外，重要的是模糊了异常错误的行数，建议段成短句。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">final</span> <span class="token class-name">Type</span> typ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MotherCommonResponse</span><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">final</span> <span class="token class-name">MotherCommonResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> typ<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json反序列化的泛型" tabindex="-1"><a class="header-anchor" href="#json反序列化的泛型" aria-hidden="true">#</a> Json反序列化的泛型</h3><p>在FastJson使用中，wings禁用AutoType，并和jackson有场景区分。 对于Json的反序列化，两者提供了相同的TypeReference类和用法。推荐用法如下，</p><ul><li>免编译擦除的单行声明 <code>new TypeReference.getType()</code></li><li>spring的<code>ResolvableType.getType()</code></li><li>jackson的<code>TypeFactory</code>获取<code>JavaType</code></li></ul><h2 id="_8-alipayservice-java-62-72" tabindex="-1"><a class="header-anchor" href="#_8-alipayservice-java-62-72" aria-hidden="true">#</a> 8.AliPayService.java 62-72</h2><p>bbl_backend 2022-09-07 09:25:32</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span> requestParams <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span> iter <span class="token operator">=</span> requestParams<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> requestParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> valueStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        valueStr <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> values<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> valueStr <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                <span class="token operator">:</span> valueStr <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> valueStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据结构和编程底子薄" tabindex="-1"><a class="header-anchor" href="#数据结构和编程底子薄" aria-hidden="true">#</a> 数据结构和编程底子薄</h3><p>场景的key-val签名算法，不过有些官方文档的代码很不负责人，写的非常HelloWorld</p><ul><li>字母序排key，用TreeMap完成，按先后顺序则LinkedHashMap</li><li>有泛型的要补全，不要用raw，这点根据IDE提示修改就好</li><li>Map同时去key-val的loop，用entry，不要获得key再get，非二遍事</li><li>集合及数组的join，有现成的工具类。</li><li>如果非要loop，参考注释的代码，使用substring和setLength</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> requestParams <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// final StringBuilder sb = new StringBuilder(512);</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> entry <span class="token operator">:</span> requestParams<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> valueStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> valueStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// for (String s: entry.getValue()) {</span>
    <span class="token comment">//     sb.append(&#39;,&#39;).append(s);</span>
    <span class="token comment">// }</span>
    <span class="token comment">// params.put(name, sb.length() &gt; 0 ? sb.substring(1) : &quot;&quot;);</span>
    <span class="token comment">// sb.setLength(0); // 需要复用时</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-bblprogressservice-java-122-124" tabindex="-1"><a class="header-anchor" href="#_9-bblprogressservice-java-122-124" aria-hidden="true">#</a> 9.BblProgressService.java 122-124</h2><p>bbl_backend 2022-09-07 11:37:32</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>maxAttempts <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">1000L</span><span class="token punctuation">,</span> multiplier <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> rate<span class="token punctuation">,</span> <span class="token class-name">String</span> express<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="retry和transaction共存的隐患" tabindex="-1"><a class="header-anchor" href="#retry和transaction共存的隐患" aria-hidden="true">#</a> Retry和Transaction共存的隐患</h3><p>多个切面存在于同一方法，是按照切面的Order顺序来执行的，上述代码堆栈如下</p><ul><li>updateStatus(BblProgressService.java:124)</li><li>proceedWithInvocation(TransactionInterceptor.java:123)</li><li>doWithRetry(RetryOperationsInterceptor.java:93)</li></ul><p>可以看出，实际为在Retry中执行Transaction，但这样存在隐患，导致事务rollback。 即在@Transactional中调用updateStatus方法时，虽然retry成功，但实际会回滚。</p><p>此类场景，最好解耦，由调度类中明确是在Retry中Tx，还是在Tx中Retry。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span>onMethod_ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">protected</span> <span class="token class-name">ServiceB</span> serviceB<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">UnexpectedRollbackException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> serviceB<span class="token punctuation">.</span><span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        serviceB<span class="token punctuation">.</span><span class="token function">b2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceB</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span>onMethod_ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">protected</span> <span class="token class-name">ServiceA</span> serviceA<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        serviceA<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        serviceA<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceA</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Transactional</span>
    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>maxAttempts <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71);function u(k,r){return a(),t("div",null,[l,p(" markdownlint-disable MD013 "),i])}const m=s(c,[["render",u],["__file","c002.html.vue"]]);export{m as default};
